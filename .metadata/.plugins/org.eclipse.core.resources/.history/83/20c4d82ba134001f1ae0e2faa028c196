package com.devsu.micropersona.dominio.controller;

import com.devsu.micropersona.dominio.dto.ClienteDto;
import com.devsu.micropersona.dominio.servicio.IClienteServicio;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

@RestController
@RequestMapping("/api/clientes/v1")
public class ClienteController {

    @Autowired
    private IClienteServicio clienteServicio;

    @PostMapping
    public ResponseEntity<ClienteDto> crearNuevoCliente(@RequestBody ClienteDto clienteDTORequest) throws URISyntaxException {
        ClienteDto nuevoCliente = clienteServicio.crearNuevoCliente(clienteDTORequest);
        if (nuevoCliente != null) {
        	 URI location = new URI("/api/clientes/" + nuevoCliente.getIdentificacion());
             return ResponseEntity.created(location).body(nuevoCliente);
        } else {
            return ResponseEntity.badRequest().build();
        }
    }

    @PutMapping
    public ResponseEntity<ClienteDto> actualizarCliente(@RequestBody ClienteDto clienteDTORequest) {
        ClienteDto clienteActualizado = clienteServicio.actualizarCliente(clienteDTORequest);
        if (clienteActualizado != null) {
            return ResponseEntity.ok(clienteActualizado);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{identificacion}")
    public ResponseEntity<Void> eliminarCliente(@PathVariable(name = "identificacion") String identificacion) {
        try {
            clienteServicio.eliminarCliente(identificacion);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return ResponseEntity.noContent().build();
        }
    }

    @GetMapping("/{identificacion}")
    public ResponseEntity<ClienteDto> obtenerCliente(@PathVariable(name = "identificacion") String identificacion) {
        ClienteDto cliente = clienteServicio.obtenerCliente(identificacion);
        if (cliente != null) {
            return ResponseEntity.ok(cliente);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    @GetMapping("/full/{identificacion}")
    public ResponseEntity<ClienteDto> obtenerClienteFull(@PathVariable(name = "identificacion") String identificacion) {
        ClienteDto cliente = clienteServicio.obtenerClienteFull(identificacion);
        if (cliente != null) {
            return ResponseEntity.ok(cliente);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/all")
    public ResponseEntity<List<ClienteDto>> obtenerTodosClientesSinDatosCuenta() {
        List<ClienteDto> clientes = clienteServicio.obtenerTodosClienteSinDatosCuenta();
        if (clientes != null && !clientes.isEmpty()) {
            return ResponseEntity.ok(clientes);
        } else {
            return ResponseEntity.noContent().build();
        }
    }
    
    @GetMapping("/all/full")
    public ResponseEntity<List<ClienteDto>> obtenerTodosClientes() {
        List<ClienteDto> clientes = clienteServicio.obtenerTodosClienteDatosCuenta();
        if (clientes != null && !clientes.isEmpty()) {
            return ResponseEntity.ok(clientes);
        } else {
            return ResponseEntity.noContent().build();
        }
    }
    
    @GetMapping("/reporte")
    public ResponseEntity<List<ClienteDto>> obtenerClienteYReporte(
            @RequestParam(name = "identificacion") String identificacion,
            @RequestParam(name = "numeroCuenta") String numeroCuenta,
            @RequestParam(name = "fechaInicial") String fechaInicial,
            @RequestParam(name = "fechaFinal") String fechaFinal) {
        
        List<ClienteDto> clientes = clienteServicio.obtenerTodosClienteDatosCuenta();
        if (clientes != null && !clientes.isEmpty()) {
            return ResponseEntity.ok(clientes);
        } else {
            return ResponseEntity.noContent().build();
        }
    }
}
